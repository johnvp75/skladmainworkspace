
import java.awt.Point;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.Stack;
import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import javax.swing.table.TableCellEditor;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InputPanel.java
 *
 * Created on 06.07.2009, 13:06:42
 */

/**
 *
 * @author Admin
 */
public class InputPanel extends javax.swing.JPanel {

    /** Creates new form InputPanel */
    public InputPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        treePopup = new JPopupMenu();
        AddGroup = new JMenuItem();
        AddSubGroup = new JMenuItem();
        RenameGroup = new JMenuItem();
        MoveGroup = new JMenuItem();
        InsertItem = new JMenuItem();
        RestInDoc = new JMenuItem();
        ListPopup = new JPopupMenu();
        MoveItem = new JMenuItem();
        AddCut = new JMenuItem();
        Copy = new JMenuItem();
        tablePopup = new JPopupMenu();
        DelLine = new JMenuItem();
        FindItem = new JMenuItem();
        jLabel1 = new JLabel();
        skladCombo = new JComboBox();
        jLabel2 = new JLabel();
        clientCombo = new JComboBox();
        jScrollPane1 = new JScrollPane();
        groupTree = new JTree(new GroupTreeModel());
        jScrollPane2 = new JScrollPane();
        modelList=new DefaultListModel();
        nameList = new JList(modelList);
        jScrollPane3 = new JScrollPane();
        model = new naklTableModel((String)clientCombo.getSelectedItem(), (String)skladCombo.getSelectedItem(), 0, false);
        model.setEditable(true);
        naklTable = new JTable(model);
        findButton = new JButton();
        saveButton = new JButton();
        regButton = new JButton();
        printButton = new JButton();
        viewButton = new JButton();
        priceButton = new JButton();
        NewTovarButton = new JButton();
        jLabel4 = new JLabel();
        discTextField = new JTextField();
        jLabel5 = new JLabel();
        valCombo = new JComboBox();
        jLabel6 = new JLabel();
        noteTextField = new JTextField();
        itogowo = new JLabel();
        itogo = new JLabel();
        jLabel7 = new JLabel();
        koefTextField = new JTextField();
        editButton = new JButton();
        jLabel8 = new JLabel();
        type_docCombo = new JComboBox();
        jButton1 = new JButton();
        nowButton = new JButton();
        ImportFromXLS = new JButton();

        AddGroup.setText("Добавить группу");
        AddGroup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                AddGroupActionPerformed(evt);
            }
        });
        treePopup.add(AddGroup);

        AddSubGroup.setText("Добавить подгруппу");
        AddSubGroup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                AddSubGroupActionPerformed(evt);
            }
        });
        treePopup.add(AddSubGroup);

        RenameGroup.setText("Переименовать");
        RenameGroup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                RenameGroupActionPerformed(evt);
            }
        });
        treePopup.add(RenameGroup);

        MoveGroup.setText("Вырезать группу");
        MoveGroup.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                MoveGroupActionPerformed(evt);
            }
        });
        treePopup.add(MoveGroup);

        InsertItem.setText("Вставить");
        InsertItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                InsertItemActionPerformed(evt);
            }
        });
        treePopup.add(InsertItem);

        RestInDoc.setText("Текущие остатки в документ");
        RestInDoc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                RestInDocActionPerformed(evt);
            }
        });
        treePopup.add(RestInDoc);

        MoveItem.setText("Вырезать");
        MoveItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                MoveItemActionPerformed(evt);
            }
        });
        ListPopup.add(MoveItem);

        AddCut.setText("Добавить вырезанное");
        AddCut.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                AddCutActionPerformed(evt);
            }
        });
        ListPopup.add(AddCut);

        Copy.setText("Создать копию");
        Copy.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        ListPopup.add(Copy);

        DelLine.setText("Удалить строку");
        DelLine.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                DelLineActionPerformed(evt);
            }
        });
        tablePopup.add(DelLine);

        FindItem.setText("Найти в базе");
        FindItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                FindItemActionPerformed(evt);
            }
        });
        tablePopup.add(FindItem);

        addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Склад");

        skladCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                skladComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Поставщик");

        groupTree.setRootVisible(false);
        groupTree.setShowsRootHandles(true);
        groupTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        groupTree.setComponentPopupMenu(treePopup);
        groupTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                groupTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(groupTree);

        nameList.setVisibleRowCount(22);
        nameList.setFixedCellWidth(300);
        nameList.setFixedCellHeight(16);
        nameList.setComponentPopupMenu(ListPopup);
        nameList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                nameListMouseClicked(evt);
            }
        });
        nameList.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                nameListKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(nameList);

        jScrollPane3.setAutoscrolls(true);

        naklTable.setAutoCreateColumnsFromModel(false);
        naklTable.getColumnModel().getColumn(0).setMaxWidth(30);
        naklTable.getColumnModel().getColumn(1).setMaxWidth(455);
        naklTable.getColumnModel().getColumn(2).setMaxWidth(50);
        naklTable.getColumnModel().getColumn(3).setMaxWidth(71);
        naklTable.getColumnModel().getColumn(4).setMaxWidth(96);
        naklTable.getColumnModel().getColumn(5).setMaxWidth(58);
        naklTable.setAutoscrolls(true);
        naklTable.setComponentPopupMenu(tablePopup);
        naklTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        naklTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                naklTableMousePressed(evt);
            }
        });
        naklTable.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                naklTableKeyPressed(evt);
            }
            public void keyTyped(KeyEvent evt) {
                naklTableKeyTyped(evt);
            }
        });
        model.addTableModelListener(new TableModelListener(){
            public void tableChanged(TableModelEvent event){
                itogo.setText("Итого (учитывая скидку): "+model.summ()*koef);
                itogowo.setText("Итого (без скидку): "+model.summvo());
                setChanged(true);
                if (model.getRowCount()==0){
                    skladCombo.setEnabled(true);
                }
                else{
                    skladCombo.setEnabled(false);
                }
            }
        });
        jScrollPane3.setViewportView(naklTable);

        findButton.setText("Поиск по коду");
        findButton.setFocusable(false);
        findButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Сохранить");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        regButton.setText("Зарегистрировать");
        regButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                regButtonActionPerformed(evt);
            }
        });

        printButton.setText("Напечатать");
        printButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        viewButton.setText("Просмотреть");
        viewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        priceButton.setText("Прайс-лист");
        priceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                priceButtonActionPerformed(evt);
            }
        });

        NewTovarButton.setText("Добавить новый");
        NewTovarButton.setFocusable(false);
        NewTovarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                NewTovarButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Скидка");

        discTextField.setText("0");
        discTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                discTextFieldActionPerformed(evt);
            }
        });
        discTextField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                discTextFieldFocusLost(evt);
            }
        });
        discTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                discTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Валюта:");

        valCombo.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Примечание:");

        noteTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                noteTextFieldActionPerformed(evt);
            }
        });

        itogowo.setText("Сумма без скидки: 0,00");

        itogo.setText("Сумма со скидкой: 0,00");

        jLabel7.setText("Коєффициент");

        koefTextField.setText("1");
        koefTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                koefTextFieldActionPerformed(evt);
            }
        });
        koefTextField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                koefTextFieldFocusLost(evt);
            }
        });
        koefTextField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                koefTextFieldKeyPressed(evt);
            }
            public void keyTyped(KeyEvent evt) {
                koefTextFieldKeyTyped(evt);
            }
        });

        editButton.setText("Редактировать");
        editButton.setFocusable(false);
        editButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Вид документа:");

        type_docCombo.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Печать штрих-кода");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        nowButton.setText("Сегодня");
        nowButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                nowButtonActionPerformed(evt);
            }
        });

        ImportFromXLS.setText("Импорт xls");
        ImportFromXLS.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ImportFromXLSActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 824, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(priceButton, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(viewButton, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(printButton, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(regButton, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(saveButton, GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(noteTextField, GroupLayout.PREFERRED_SIZE, 745, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nowButton, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 319, GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                    .addComponent(clientCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(skladCombo, 0, 254, Short.MAX_VALUE))))
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jLabel8, Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(ComponentPlacement.RELATED)
                                        .addComponent(valCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 329, GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(type_docCombo, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                    .addComponent(findButton, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(NewTovarButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ImportFromXLS, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itogowo, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(itogo, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(koefTextField, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(skladCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(type_docCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clientCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(valCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(findButton)
                                .addGap(29, 29, 29)
                                .addComponent(NewTovarButton)
                                .addGap(29, 29, 29)
                                .addComponent(editButton)
                                .addGap(26, 26, 26)
                                .addComponent(ImportFromXLS))
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 279, GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(noteTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(nowButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED, 13, GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(regButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(printButton)
                        .addGap(4, 4, 4)
                        .addComponent(viewButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(priceButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(itogowo)
                    .addComponent(jLabel4)
                    .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(itogo)
                    .addComponent(jLabel7)
                    .addComponent(koefTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void groupTreeValueChanged(TreeSelectionEvent evt) {//GEN-FIRST:event_groupTreeValueChanged
  	int index;
	index=((DataNode)evt.getPath().getLastPathComponent()).getIndex();
	initList(index);
    }//GEN-LAST:event_groupTreeValueChanged

    private void skladComboActionPerformed(ActionEvent evt) {//GEN-FIRST:event_skladComboActionPerformed
        setSklad((String)skladCombo.getSelectedItem());
        if (!isRebuild() && !groupTree.isSelectionEmpty())
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
    }//GEN-LAST:event_skladComboActionPerformed

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initCombo();
        setRebuild(true);
        koefTextField.setText("1");
        setKoef(1.0);

        InsertItem.setEnabled(false);
        AddCut.setEnabled(false);
        if (!groupTree.isSelectionEmpty())
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
        if (MainFrame.getEditDocId()==0){
            discTextField.setText("0");
            model.setIndDiscount(0);
            noteTextField.setText("");
            setNote("");
            setId_doc(0);
        }else{
            try{
                ResultSet rs=DataSet.QueryExec("select trim(c.name), trim(s.name), trim(m.name), trim(v.name), trim(d.note), d.disc, trim(t.name) " +
                        "from document d, client c, sklad s, manager m, val v, type_doc t where d.id_doc="+MainFrame.getEditDocId()+" and " +
                        "d.id_client=c.id_client and d.id_skl=s.id_skl and d.id_manager=m.id_manager and d.id_val=v.id_val and t.id_type_doc=d.id_type_doc", false);
                rs.next();
                discTextField.setText(rs.getString(6));
                model.setIndDiscount(rs.getInt(6));
                noteTextField.setText(rs.getString(5));
                setNote(rs.getString(5));
                setId_doc(MainFrame.getEditDocId());
                clientCombo.setSelectedItem(rs.getString(1));
                skladCombo.setSelectedItem(rs.getString(2));
                setManager(rs.getString(3));
                valCombo.setSelectedItem(rs.getString(4));
                type_docCombo.setSelectedItem(rs.getString(7));
                rs=DataSet.QueryExec("select trim(t.name), l.kol, l.cost, l.disc from lines l, tovar t where l.id_doc="+MainFrame.getEditDocId()+" and t.id_tovar=l.id_tovar", false);
                while (rs.next()){
                   model.add(rs.getString(1), rs.getInt(2), rs.getDouble(3), rs.getInt(4), 0);
                }
            }catch(Exception e){
                e.printStackTrace();
            }

        }
        if (!groupTree.isSelectionEmpty())
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
        setRebuild(false);
        setChanged(false);

    }//GEN-LAST:event_formComponentShown

    private void nameListMouseClicked(MouseEvent evt) {//GEN-FIRST:event_nameListMouseClicked
        if (evt.getClickCount()==2 && nameList.getSelectedValue()!=null){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
//            naklTable.getColumnModel().getColumn(2).
            naklTable.editCellAt(row, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
            naklTable.scrollRectToVisible(naklTable.getCellRect(row, 0, false));

        }
    }//GEN-LAST:event_nameListMouseClicked

    private void findButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        find(null);
    }//GEN-LAST:event_findButtonActionPerformed
    private void find(String nazv){
        try{
            if (nazv==null)
                nazv=InputBarcode.newcod(JOptionPane.showInputDialog(this, "Введите код"), (String)skladCombo.getSelectedItem(), "").Name;
            ResultSet rs=DataSet.QueryExec("select id_group from kart where id_tovar=(select id_tovar from tovar where name ='"+nazv+"') and " +
                    "id_skl=(select id_skl from sklad where name='"+(String)skladCombo.getSelectedItem()+"')", false);
            rs.next();
            int group=rs.getInt(1);
            rs=DataSet.QueryExec("select trim(name) from groupid where id_group="+group, false);
            rs.next();
            String name=rs.getString(1);
            Object[] path = new Object[50];
            path[0]=new DataNode(name,group);
            int i=1;
            rs=DataSet.QueryExec("select id_group, trim(name) from groupid where id_group=(select parent_group from groupid where id_group="+group+")", false);
            while (rs.next()){
                group=rs.getInt(1);
                name=rs.getString(2);
                path[i]=new DataNode(name,group);
                i++;
                rs=DataSet.QueryExec("select id_group, trim(name) from groupid where id_group=(select parent_group from groupid where id_group="+group+")", false);
            }
            Object[] path1 = new Object[i+1] ;
//            path1[0]=new DataNode("Все группы",-2);
            path1[0]=groupTree.getModel().getRoot();
            for (int j=i; j>0; j--){
                path1[i-j+1]=path[j-1];
            }
            TreePath tPath=new TreePath(path1);
//            groupTree.expandPath(tPath);
            groupTree.scrollPathToVisible(tPath);
            groupTree.setSelectionPath(tPath);
//            nameList.setSelectedIndex(modelList.indexOf(nazv));
            nameList.setSelectedValue(nazv, true);
            nameList.scrollRectToVisible(nameList.getCellBounds(nameList.getSelectedIndex(), nameList.getSelectedIndex()));
            nameList.requestFocus();
//            nameList.sc

//            groupTree.treeDidChange();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Ничего не нашел", "Неудача", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    private void priceButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_priceButtonActionPerformed
        if (isChanged())
            return;
//        if (priceDialog==null)
            priceDialog=new PriceForm(null, true);
        Vector<String> nazv=new Vector<String>(0);
        Vector<Double> cost=new Vector<Double>(0);
        double curs=1.0;
        try {
            ResultSet rs = DataSet.QueryExec("select curs from curs_now where id_val=(select id_val from val where name='" + valCombo.getSelectedItem() + "')", false);
            if (rs.next())
                curs=rs.getDouble(1);
            rs = DataSet.QueryExec("select curs from curs_now where id_val=(select id_val from type_price where id_price =(select id_price from sklad where name='" + skladCombo.getSelectedItem() + "'))",false);
            if (rs.next())
                curs=curs/rs.getDouble(1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        for (int i=0; i<model.getRowCount();i++){
            nazv.addElement((String)model.getValueAt(i, 1));
            cost.addElement((Double)model.getValueAt(i, 3)*(1-(new Integer(model.getIndDiscount())).doubleValue()/100)*(1-((Integer)model.getValueAt(i, 5)).doubleValue()/100)*getKoef()*curs);
        }
        priceDialog.setSklad((String)skladCombo.getSelectedItem());
        priceDialog.setCurs(curs);
        priceDialog.dialogShown(nazv, cost);
        ResultSet rs;
        try {
            rs = DataSet.QueryExec("select trim(t.name), l.kol, l.cost, l.disc from lines l, tovar t where l.id_doc="+getId_doc()+" and t.id_tovar=l.id_tovar", false);
            model.removeAll();
            while (rs.next()){
                model.add(rs.getString(1), rs.getInt(2), rs.getDouble(3), rs.getInt(4), 0);
        }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        koefTextField.setText("1");
        setKoef(1);
        model.fireTableDataChanged();

    }//GEN-LAST:event_priceButtonActionPerformed

    @SuppressWarnings("static-access")
    private void naklTableKeyPressed(KeyEvent evt) {//GEN-FIRST:event_naklTableKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            if(naklTable.getEditingColumn()==2){
                naklTable.editCellAt(naklTable.getEditingRow(), 3);
//                naklTable.setEditingColumn(3);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==3){
                naklTable.editCellAt(naklTable.getEditingRow(), 5);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==5){
                evt.setKeyCode(evt.VK_UNDEFINED);
                TableCellEditor edit=naklTable.getCellEditor();
                if (edit!=null){
                    edit.stopCellEditing();
                }
                nameList.requestFocus();
                return;
            }
        }


    }//GEN-LAST:event_naklTableKeyPressed

    private void nameListKeyPressed(KeyEvent evt) {//GEN-FIRST:event_nameListKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.getSelectionModel().setSelectionInterval(row, row);
            naklTable.editCellAt(row, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
            naklTable.scrollRectToVisible(naklTable.getCellRect(row, 0, false));
//            jScrollPane3.scrollRectToVisible(naklTable.getCellRect(row, 0, false));
        }
        if(evt.getKeyCode()==evt.VK_F5)
            newTovar();
        if(evt.getKeyCode()==evt.VK_F3)
            find(null);
    }//GEN-LAST:event_nameListKeyPressed
    private int id_doc;

    public int getId_doc() {
        return id_doc;
    }

    public void setId_doc(int id_doc) {
        this.id_doc = id_doc;
    }
    private boolean changed = false;

    public boolean isChanged() {
        return changed;
    }

    public void setChanged(boolean changed) {
        this.changed = changed;
    }

    private void NewTovarButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_NewTovarButtonActionPerformed
        newTovar();
    }//GEN-LAST:event_NewTovarButtonActionPerformed

    private void newTovar(){
        if (dialog==null)
            dialog = new NewTovarDialog(null,true);
        dialog.setSklad((String)skladCombo.getSelectedItem());
        dialog.setNewTovar(true, "");
        dialog.setGroup(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
        dialog.setVisible(true);
        if (dialog.isOk()){
            try {
                DataSet.UpdateQuery("insert into kart (id_tovar, id_group, id_nom,id_skl) select (select id_tovar from tovar where name='" + dialog.getTovar() + "'), " + ((DataNode) groupTree.getLastSelectedPathComponent()).getIndex() + ", (select max(id_nom)+1 from kart), id_skl from sklad where name='" + skladCombo.getSelectedItem() + "'");
            } catch (SQLException ex) {
                try {
                    DataSet.UpdateQuery("rollback to point1");
                } catch (SQLException ex1) {
                    ex.printStackTrace();
                }
                ex.printStackTrace();
            }
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            nameList.setSelectedValue(dialog.getTovar(), true);
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row, 2);
            naklTable.scrollRectToVisible(naklTable.getCellRect(row, 0, false));
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }
    private void editTovar(){
        if (nameList.getSelectedIndex()<0)
            return;
        if (dialog==null)
            dialog = new NewTovarDialog(null,true);
        dialog.setSklad((String)skladCombo.getSelectedItem());
        dialog.setNewTovar(false, (String)nameList.getSelectedValue());
        dialog.setGroup(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
        dialog.setVisible(true);
        if (dialog.isOk()){
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            nameList.setSelectedValue(dialog.getTovar(), true);
        }
    }
    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        TableCellEditor edit=naklTable.getCellEditor();
            if (edit!=null){
                edit.stopCellEditing();
            }
        if (clientCombo.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this, "Выберите поставщика","Нет поставщика",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (valCombo.getSelectedIndex()==0) {
            JOptionPane.showMessageDialog(this, "Выберите валюту","Нет валюты",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (noteTextField.getText().length()==0){
            JOptionPane.showMessageDialog(this, "Примечание не может быть пустым","Пустое примечание",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (!noteTextField.getText().matches(".*((0[1-9])|((1|2)[0-9])|(3(0|1)))\\.((0([1-9])|(1(0|1|2))))\\.((19)|(20)[0-9][0-9]).*")){
            JOptionPane.showMessageDialog(this, "Примечание должно содержать дату в формате ДД.ММ.ГГГГ\nНапример 15.03.2009","Отсутствует дата",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (int i=0; i<model.getRowCount(); i++){
	if(((Integer)model.getValueAt(i, 2)).intValue()==0){
		model.removeRow(i);
		i--;
		}
	}
        if (model.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Пустую накладную сохранить нельзя","Пустая накладная",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        setNote(noteTextField.getText());
        setKoef(new Double(koefTextField.getText()));
        try{
            DataSet.UpdateQuery("savepoint point2");
            String SQL;
            ResultSet rs1;
            SQL="lock table document in exclusive mode";
            if (getId_doc()==0){
                setId_doc(1);
                DataSet.UpdateQuery(SQL);
                rs1=DataSet.QueryExec("select max(id_doc) from document", false);
                if (rs1.next())
                    setId_doc(rs1.getInt(1)+1);
                SQL="insert into document (id_type_doc, id_doc, id_client, id_skl, id_val, sum, note, disc, id_manager) select (" +
                        "select id_type_doc from type_doc where name='"+type_docCombo.getSelectedItem()+"') as id_type_doc,"+getId_doc()+" as id_doc"+
                    ", (select id_client from client where name='"+(String)clientCombo.getSelectedItem()+"') as id_client" +
                    ", (select id_skl from SKLAD where name='"+(String)skladCombo.getSelectedItem()+"') as id_skl"+
                    ", (select id_val from val where name='"+(String)valCombo.getSelectedItem()+"') as id_val" +
                    ", "+model.summ()+" as sum ,'"+getNote()+"' as note, "+model.getIndDiscount()+" as disc, " +
                    " id_manager from manager where name='"+getManager()+"'";
            }else{
                SQL="update document set id_type_doc=(select id_type_doc from type_doc where name='"+type_docCombo.getSelectedItem()+"') "+
                    ", id_client=(select id_client from client where name='"+(String)clientCombo.getSelectedItem()+"')" +
                    ", id_skl=(select id_skl from SKLAD where name='"+(String)skladCombo.getSelectedItem()+"')"+
                    ", id_val=(select id_val from val where name='"+(String)valCombo.getSelectedItem()+"')" +
                    ", sum="+model.summ()+" ,note='"+getNote()+"', disc="+model.getIndDiscount()+", " +
                    " id_manager=( select id_manager from manager where name='"+getManager()+"') where id_doc="+getId_doc();
                DataSet.UpdateQuery(SQL);
                SQL="delete from lines where id_doc="+getId_doc();
            }

            DataSet.UpdateQuery(SQL);
            for (int i=0;i<model.getRowCount();i++){
                SQL="insert into lines (id_doc,kol,cost,disc,id_tovar) select "+getId_doc()+" as id_doc, "+model.getValueAt(i,2)+" as kol," +
                        " "+model.getValueAt(i,3)+"*"+getKoef()+" as cost, "+model.getValueAt(i, 5)+" as disc, id_tovar from tovar where name='"+
                model.getValueAt(i, 1)+"'";
                DataSet.UpdateQuery(SQL);
            }
            setChanged(false);
            DataSet.commit();
            JOptionPane.showMessageDialog(this, "Документ записан", "Запись", JOptionPane.PLAIN_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Запись не удалась. Повторите попытку.", "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            try{
                DataSet.UpdateQuery("rollback to point2");
            }catch(Exception ex){
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    private String Note;

    public String getNote() {
        return Note;
    }

    public void setNote(String Note) {
        this.Note = Note;
    }

    private void discTextFieldKeyTyped(KeyEvent evt) {//GEN-FIRST:event_discTextFieldKeyTyped
        if (evt.getKeyChar()=='-')
            if (discTextField.getText().length()==0)
                return;
            else
                evt.setKeyChar(evt.CHAR_UNDEFINED);
        char[] symb = new char[1];
        symb[0]=evt.getKeyChar();
        if (!(new String(symb)).matches("[0-9]"))
            evt.setKeyChar(evt.CHAR_UNDEFINED);
    }//GEN-LAST:event_discTextFieldKeyTyped

    private void discTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_discTextFieldActionPerformed
        model.setIndDiscount(new Integer(discTextField.getText()));
        koefTextField.requestFocus();
    }//GEN-LAST:event_discTextFieldActionPerformed

    private void noteTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_noteTextFieldActionPerformed
        setNote(noteTextField.getText());
        discTextField.requestFocus();
    }//GEN-LAST:event_noteTextFieldActionPerformed

    private void regButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_regButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ зарегистрировать нельзя! \n Сохраните документ и повторите операцию", "Ошибка проведения", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        String SQL="";
        try{
            ResultSet rs=DataSet.QueryExec("select max(numb) from document where (to_number(to_char(day, 'YYYY'))=to_number(to_char(sysdate, 'YYYY'))) and (id_type_doc=(select id_type_doc from type_doc where name='"+type_docCombo.getSelectedItem()+"')) ", false);
            rs.next();
            int numb=rs.getInt(1)+1;
            DataSet.QueryExec("select * from document where id_doc="+getId_doc()+" for update", false);
            DataSet.QueryExec("select * from kart where cost is NULL for update ", false);
//            double k=1.0;
            for (int i=0; i<model.getRowCount();i++){
                rs=DataSet.QueryExec("Select id_nom from kart where (id_tovar=(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"')) and (id_skl = (select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"')) and (cost is NULL)", false);
                if (rs.next()){
                    int id_nom=rs.getInt(1);
                    DataSet.UpdateQuery("update kart set cost="+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+", day=sysdate, val=(select id_val from val where name='"+valCombo.getSelectedItem()+"') where id_nom="+id_nom );
                }else{
                    rs=DataSet.QueryExec("select count(*) from kart where (cost="+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+") and (val=(select id_val from val where name='"+valCombo.getSelectedItem()+"')) and (id_tovar=(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"')) and (id_skl = (select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"'))",false);
                    rs.next();
                    if (rs.getInt(1)==0){
                        SQL="insert into kart (id_tovar, id_skl, id_group, id_nom, cost, day, val) select " +
                                "(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"') as id_tovar," +
                                "(select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"') as id_skl," +
                                "(select distinct id_group from kart where id_tovar=(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"') and id_skl=(select id_skl from sklad where name='"+skladCombo.getSelectedItem() + "')) as id_group," +
                                "(select max(id_nom)+1 from kart) as id_nom," +
                                ""+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+" as cost," +
                                "sysdate as day," +
                                "id_val from val where name='"+valCombo.getSelectedItem()+"'";
                        DataSet.UpdateQuery(SQL);
                    }
                }
            }
            DataSet.UpdateQuery("update document set numb="+numb+", day=sysdate where id_doc="+getId_doc());
            DataSet.commit();
            model.removeAll();
            setChanged(false);
            setId_doc(0);
            setVisible(false);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Зарегистрировать не удалась. Повторите попытку.\n"+SQL, "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            try {
                DataSet.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }//GEN-LAST:event_regButtonActionPerformed

    private void printButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ напечатать нельзя! \n Сохраните документ и повторите операцию", "Ошибка печати", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Print_view(true);
    }//GEN-LAST:event_printButtonActionPerformed

    private void viewButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ просмотреть нельзя! \n Сохраните документ и повторите операцию", "Ошибка просмотра", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Print_view(false);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void koefTextFieldKeyTyped(KeyEvent evt) {//GEN-FIRST:event_koefTextFieldKeyTyped
        char[] symb = new char[1];
        symb[0]=evt.getKeyChar();
        if (symb[0]==','){
            symb[0]='.';
            evt.setKeyChar('.');
        }
        if (!(new String(symb)).matches("[0-9.]"))
            evt.setKeyChar(evt.CHAR_UNDEFINED);
    }//GEN-LAST:event_koefTextFieldKeyTyped

    private void discTextFieldFocusLost(FocusEvent evt) {//GEN-FIRST:event_discTextFieldFocusLost
        model.setIndDiscount(new Integer(discTextField.getText()));
        model.fireTableDataChanged();

    }//GEN-LAST:event_discTextFieldFocusLost

    private void koefTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_koefTextFieldActionPerformed
        setKoef(new Double(koefTextField.getText()));
        model.fireTableDataChanged();
        nameList.requestFocus();
    }//GEN-LAST:event_koefTextFieldActionPerformed

    private void formComponentHidden(ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        TableCellEditor edit=naklTable.getCellEditor();
            if (edit!=null){
                edit.stopCellEditing();
            }
        model.removeAll();
        setChanged(false);
        setId_doc(0);
    }//GEN-LAST:event_formComponentHidden

    private void AddGroupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_AddGroupActionPerformed
        String nazv=JOptionPane.showInputDialog(this, "Введите название новой группы");
        if (nazv.trim().length()==0)
            return;
        try{
            ResultSet rs=DataSet.QueryExec("select count (*) from groupid where upper(name)='"+nazv.trim().toUpperCase()+"' and parent_group is NULL", false);
            rs.next();
            if (rs.getInt(1)>0){
                JOptionPane.showMessageDialog(this, "Такая группа существует", "Новая группа",JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataSet.UpdateQuery("insert into groupid (name, id_group) select '"+nazv.trim()+"', max(id_group)+1 from groupid");
            ((GroupTreeModel)groupTree.getModel()).setRoot();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_AddGroupActionPerformed

    private void AddSubGroupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_AddSubGroupActionPerformed
        String nazv=JOptionPane.showInputDialog(this, "Введите название новой подгруппы");
        if (nazv.trim().length()==0 || groupTree.getLastSelectedPathComponent()==null)
            return;

        try{
            ResultSet rs=DataSet.QueryExec("select count (*) from groupid where upper(name)='"+nazv.trim().toUpperCase()+"' and parent_group="+((DataNode)groupTree.getLastSelectedPathComponent()).getIndex(), false);
            rs.next();
            if (rs.getInt(1)>0){
                JOptionPane.showMessageDialog(this, "В данной группе такая подгруппа существует", "Новая группа",JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataSet.UpdateQuery("insert into groupid (name, parent_group, id_group) select '"+nazv.trim()+"', "+((DataNode)groupTree.getLastSelectedPathComponent()).getIndex()+", max(id_group)+1 from groupid");
            ((GroupTreeModel)groupTree.getModel()).setRoot();
        }catch(Exception e){
            e.printStackTrace();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_AddSubGroupActionPerformed

    private void RenameGroupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_RenameGroupActionPerformed
        String nazv=JOptionPane.showInputDialog(this, "Введите новое название группы");
        if (nazv.trim().length()==0 || groupTree.getLastSelectedPathComponent()==null)
            return;

        try{
            ResultSet rs=DataSet.QueryExec("select count (*) from groupid where upper(name)='"+nazv.trim().toUpperCase()+"' and parent_group="+((DataNode)groupTree.getLeadSelectionPath().getParentPath().getLastPathComponent()).getIndex(), false);
            rs.next();
            if (rs.getInt(1)>0){
                JOptionPane.showMessageDialog(this, "В данной группе такая подгруппа существует", "Новая группа",JOptionPane.ERROR_MESSAGE);
                return;
            }
            DataSet.UpdateQuery("update groupid set name='"+nazv.trim()+"' where id_group="+((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            ((GroupTreeModel)groupTree.getModel()).setRoot();
        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_RenameGroupActionPerformed

    private void editButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        editTovar();
    }//GEN-LAST:event_editButtonActionPerformed

    private void MoveItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_MoveItemActionPerformed
        if (groupTree.getLeadSelectionPath().getLastPathComponent()==null || nameList.getSelectedValue()==null)
            return;
        
        //setNameMove((String)nameList.getSelectedValue());
        nameMove.removeAllElements();
        groupeMove.removeAllElements();
        Object[] namesMove=nameList.getSelectedValues();
        for (Object element:namesMove){
            nameMove.push((String)element);
        }
        groupeMove.push(((DataNode)groupTree.getLeadSelectionPath().getLastPathComponent()).getIndex());
//        setGroumMove(((DataNode)groupTree.getLeadSelectionPath().getLastPathComponent()).getIndex());
        InsertItem.setEnabled(true);
        AddCut.setEnabled(true);
    }//GEN-LAST:event_MoveItemActionPerformed

    private void InsertItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_InsertItemActionPerformed
        if (groupTree.getLeadSelectionPath().getLastPathComponent()==null)
            return;
        String SQL;
        int gr=((DataNode)groupTree.getLeadSelectionPath().getLastPathComponent()).getIndex();
        boolean nameMoved=false;
        try{
            if (!nameMove.isEmpty()){
                SQL=String.format("update kart set id_group=%s where id_tovar in (select id_tovar from tovar where name in (%s)) and id_group=%s"+
                    " and id_skl=(select id_skl from sklad where name='%s')", gr, CommaSeparatedStringStack(nameMove),groupeMove.pop(),skladCombo.getSelectedItem());
                nameMoved=true;
            }
            
            else{
                SQL=String.format("update groupid set parent_group=%s where id_group in (%s)", gr,CommaSeparatedStack(groupeMove));
            }
            DataSet.UpdateQuery(SQL);
//            DataSet.commit();
            
            InsertItem.setEnabled(false);
            AddCut.setEnabled(false);
            if (nameMoved)
                ((GroupTreeModel)groupTree.getModel()).setRoot();
//            setNameMove(null);
            initList(gr);
        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_InsertItemActionPerformed

    private String CommaSeparatedStack(Stack stack){
        String result=stack.empty()?" ":stack.pop().toString();
        while (!stack.empty()){
            result=result+", "+stack.pop();
        }
        return result;
        
    }
    private String CommaSeparatedStringStack(Stack stack){
        String result=stack.empty()?" ":"'"+stack.pop().toString()+"'";
        while (!stack.empty()){
            result=result+", '"+stack.pop()+"'";
        }
        return result;
        
    }

    private void AddCutActionPerformed(ActionEvent evt) {//GEN-FIRST:event_AddCutActionPerformed
        if (nameMove.size()>1) {
            JOptionPane.showMessageDialog(null, "Нельзя объединять больше двух элементов одновременно!", "Ошибка объединения", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String addName=nameMove.pop();
        if (nameList.getSelectedValue()==null || JOptionPane.showConfirmDialog(this, "Вы уверены что следует объеденить "+addName+" c "+(String)nameList.getSelectedValue()+"\n при этом пропадет "+addName, "Объединение", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==JOptionPane.NO_OPTION)
            return;
        try{
            ResultSet rs=DataSet.QueryExec("select id_tovar from tovar where name='"+addName+"'", false);
            rs.next();
            int move=rs.getInt(1);
            String SQL=String.format("select id_tovar from tovar where name='%s'",(String)nameList.getSelectedValue());
            rs=DataSet.QueryExec(SQL, false);
            rs.next();
            int add=rs.getInt(1);
            int gr=((DataNode)groupTree.getLeadSelectionPath().getLastPathComponent()).getIndex();
            DataSet.UpdateQuery("update lines set id_tovar="+add+" where id_tovar = "+move);
            DataSet.UpdateQuery("update kart set id_tovar="+add+", id_group="+gr+" where id_tovar = "+move);
            DataSet.UpdateQuery("update bar_code set id_tovar="+add+" where id_tovar = "+move);
            DataSet.UpdateQuery("delete from price where id_tovar = "+move);
            DataSet.UpdateQuery("delete from tovar where id_tovar = "+move);
//            DataSet.commit();
            InsertItem.setEnabled(false);
            AddCut.setEnabled(false);
            initList(gr);
        }catch(Exception e){
            e.printStackTrace();
        }

    }//GEN-LAST:event_AddCutActionPerformed

    private void naklTableKeyTyped(KeyEvent evt) {//GEN-FIRST:event_naklTableKeyTyped
        if (evt.getKeyChar()==',')
            evt.setKeyChar('.');
    }//GEN-LAST:event_naklTableKeyTyped

    private void naklTableMousePressed(MouseEvent evt) {//GEN-FIRST:event_naklTableMousePressed
	if (evt.getButton()==MouseEvent.BUTTON1 && evt.getClickCount()==2){
		if (!(((JTextField)naklTable.getEditorComponent())==null)){
                        ((JTextField)naklTable.getEditorComponent()).selectAll();
			((JTextField)naklTable.getEditorComponent()).addKeyListener(new KeyAdapter(){
				public void keyTyped(KeyEvent event){
					if (event.getKeyChar()==',')
						event.setKeyChar('.');
				}
			});
		}
	}
        if (evt.getButton()==MouseEvent.BUTTON3){
            setMousePoint(evt.getPoint());
        }
    }//GEN-LAST:event_naklTableMousePressed

    private void DelLineActionPerformed(ActionEvent evt) {//GEN-FIRST:event_DelLineActionPerformed
        if (naklTable.getCellEditor()!=null){
            naklTable.getCellEditor().stopCellEditing();
        }
        int row=getMousePoint().y/naklTable.getRowHeight();
	model.removeRow(row);
        // TODO add your handling code here:
    }//GEN-LAST:event_DelLineActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Сначала надо сохранить! \n Сохраните документ и повторите операцию", "Ошибка печати штрих-кода", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        PrintBarCode form=new PrintBarCode(null,true,getId_doc());
        form.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CopyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        if (groupTree.getLeadSelectionPath().getLastPathComponent()==null || nameList.getSelectedValue()==null)
            return;
        if (dialog==null)
            dialog = new NewTovarDialog(null,true);
        dialog.setSklad((String)skladCombo.getSelectedItem());
        dialog.setNewTovar(true, (String)nameList.getSelectedValue());
        dialog.setGroup(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
        dialog.setVisible(true);
        if (dialog.isOk()){
            try {
                DataSet.UpdateQuery("insert into kart (id_tovar, id_group, id_nom,id_skl) select (select id_tovar from tovar where name='" + dialog.getTovar() + "'), " + ((DataNode) groupTree.getLastSelectedPathComponent()).getIndex() + ", (select max(id_nom)+1 from kart), id_skl from sklad where name='" + skladCombo.getSelectedItem() + "'");
            } catch (SQLException ex) {
                try {
                    DataSet.UpdateQuery("rollback to point1");
                } catch (SQLException ex1) {
                    ex.printStackTrace();
                }
                ex.printStackTrace();
            }
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            nameList.setSelectedValue(dialog.getTovar(), true);
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row, 2);
            naklTable.scrollRectToVisible(naklTable.getCellRect(row, 0, false));
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }//GEN-LAST:event_CopyActionPerformed

    private void FindItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_FindItemActionPerformed
        int row=getMousePoint().y/naklTable.getRowHeight();
        if (row>=0 && row<model.getRowCount()){
            find((String)model.getValueAt(row, 1));
        }
    }//GEN-LAST:event_FindItemActionPerformed

    private void koefTextFieldFocusLost(FocusEvent evt) {//GEN-FIRST:event_koefTextFieldFocusLost
        setKoef(new Double(koefTextField.getText()));
        model.fireTableDataChanged();
        nameList.requestFocus();
    }//GEN-LAST:event_koefTextFieldFocusLost

    private void koefTextFieldKeyPressed(KeyEvent evt) {//GEN-FIRST:event_koefTextFieldKeyPressed
        if (evt.getKeyChar()==',')
            evt.setKeyChar('.');
    }//GEN-LAST:event_koefTextFieldKeyPressed

    private void MoveGroupActionPerformed(ActionEvent evt) {//GEN-FIRST:event_MoveGroupActionPerformed
        if (groupTree.getLeadSelectionPath().getLastPathComponent()==null)
            return;
        groupeMove.removeAllElements();
        nameMove.removeAllElements();
        TreePath[] selectedItems=groupTree.getSelectionPaths();
        for (TreePath element : selectedItems ){
            groupeMove.push(((DataNode)element.getLastPathComponent()).getIndex());
        }
//        setGroumMove(((DataNode)groupTree.getLeadSelectionPath().getLastPathComponent()).getIndex());
        InsertItem.setEnabled(true);
    }//GEN-LAST:event_MoveGroupActionPerformed

    private void nowButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_nowButtonActionPerformed
//        GregorianCalendar today=new GregorianCalendar();
        String noteText=String.format("Приход %1$td.%1$tm.%1$tY", new GregorianCalendar());
        noteTextField.setText(noteText);
    }//GEN-LAST:event_nowButtonActionPerformed

    private void RestInDocActionPerformed(ActionEvent evt) {//GEN-FIRST:event_RestInDocActionPerformed
        int groupForRest=((DataNode)groupTree.getSelectionPath().getLastPathComponent()).getIndex();
        String SQL=String.format("select trim(t.name),t1.ost from (select sum(l.kol*decode(t.operacia,1,1,2,-1)) as ost, l.id_tovar from lines l, type_doc t, document d where l.id_tovar in (select distinct id_tovar from kart where id_group in (select id_group from groupid start with id_group=%s connect by parent_group=prior id_group) and id_skl=(select id_skl from sklad where name='%s'))and l.id_doc = d.id_doc and not (d.day is null) and t.id_type_doc = d.id_type_doc group by l.id_tovar) t1, tovar t where t1.id_tovar=t.id_tovar and t1.ost>0 order by t.name", groupForRest,getSklad());
        try{
            ResultSet rs=DataSet.QueryExec(SQL, false);
            while (rs.next()){
                model.add(rs.getString(1), rs.getInt(2), 0.0, 0, 0);
            }
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_RestInDocActionPerformed

    private void ImportFromXLSActionPerformed(ActionEvent evt) {//GEN-FIRST:event_ImportFromXLSActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Microsoft Excel files", "xls");
        chooser.setFileFilter(filter);
        chooser.setMultiSelectionEnabled(false);
        int returnVal=chooser.showOpenDialog(null);
        if (returnVal==JFileChooser.APPROVE_OPTION){
            File file=chooser.getSelectedFile();
            try {
                InputStream in=new FileInputStream(file);
                HSSFWorkbook wb = new HSSFWorkbook(in);
                ImportFromXLSToInvoice importDialog=new ImportFromXLSToInvoice(null, true, wb);
                importDialog.setVisible(true);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            
            
        }
    }//GEN-LAST:event_ImportFromXLSActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JMenuItem AddCut;
    private JMenuItem AddGroup;
    private JMenuItem AddSubGroup;
    private JMenuItem Copy;
    private JMenuItem DelLine;
    private JMenuItem FindItem;
    private JButton ImportFromXLS;
    private JMenuItem InsertItem;
    private JPopupMenu ListPopup;
    private JMenuItem MoveGroup;
    private JMenuItem MoveItem;
    private JButton NewTovarButton;
    private JMenuItem RenameGroup;
    private JMenuItem RestInDoc;
    private JComboBox clientCombo;
    private JTextField discTextField;
    private JButton editButton;
    private JButton findButton;
    private JTree groupTree;
    private JLabel itogo;
    private JLabel itogowo;
    private JButton jButton1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextField koefTextField;
    private JTable naklTable;
    private JList nameList;
    private JTextField noteTextField;
    private JButton nowButton;
    private JButton priceButton;
    private JButton printButton;
    private JButton regButton;
    private JButton saveButton;
    private JComboBox skladCombo;
    private JPopupMenu tablePopup;
    private JPopupMenu treePopup;
    private JComboBox type_docCombo;
    private JComboBox valCombo;
    private JButton viewButton;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel modelList;
    private String Sklad;
    private naklTableModel model;
    private NewTovarDialog dialog;
    private String Manager;
    private double koef = 1.0;
    private PriceForm priceDialog=null;
//    protected String nameMove;
    private Point MousePoint;
    protected boolean rebuild = false;
    private boolean copyTovar;
    protected Stack<Integer> groupeMove = new Stack<Integer>();
    protected Stack<String> nameMove = new Stack<String>();



    public boolean isCopyTovar() {
        return copyTovar;
    }

    public void setCopyTovar(boolean copyTovar) {
        this.copyTovar = copyTovar;
    }

    
    public boolean isRebuild() {
        return rebuild;
    }

    public void setRebuild(boolean rebuild) {
        this.rebuild = rebuild;
    }

    /**
     * Get the value of MousePoint
     *
     * @return the value of MousePoint
     */
    public Point getMousePoint() {
        return MousePoint;
    }

    /**
     * Set the value of MousePoint
     *
     * @param MousePoint new value of MousePoint
     */
    public void setMousePoint(Point MousePoint) {
        this.MousePoint = MousePoint;
    }

/*    public String getNameMove() {
        return nameMove;
    }

    public void setNameMove(String nameMove) {
        this.nameMove = nameMove;
    }
*/
/*    protected int groumMove;

    public int getGroumMove() {
        return groumMove;
    }

    public void setGroumMove(int groumMove) {
        this.groumMove = groumMove;
    }
*/

    public double getKoef() {
        return koef;
    }

    public void setKoef(double koef) {
        this.koef = koef;
    }

    /**
     * Get the value of Manager
     *
     * @return the value of Manager
     */
    public String getManager() {
        return Manager;
    }

    public void setManager(String Manager) {
        this.Manager = Manager;
    }

    public void setSklad(String Sklad) {
        this.Sklad = Sklad;
    }

    public String getSklad(){
        return this.Sklad;
    }
    
    private void initList(int aIndex){
	modelList.clear();
	String Query="select trim(name) from (Select distinct tovar.name from kart inner join tovar on kart.id_tovar=tovar.id_tovar where (kart.id_group="+aIndex+") and (kart.id_skl=(Select id_skl from sklad where name='"+Sklad+"')) order by tovar.name)";
	
	try {
                ResultSet rs=DataSet.QueryExec(Query,false);
        	while (rs.next())
		modelList.addElement(rs.getString(1));
		rs.close();
	} catch (Exception e) {
		e.printStackTrace();
	}
    }
    private void initCombo(){
        setRebuild(true);
        skladCombo.removeAllItems();
        ResultSet rs;
        try{
            rs = DataSet.QueryExec("select trim(name) from sklad order by trim(name)", false);
            while (rs.next())
                skladCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        skladCombo.setSelectedIndex(0);
        setSklad((String)skladCombo.getSelectedItem());
        
        clientCombo.removeAllItems();
        clientCombo.addItem("--Выберите поставщика--");
        try{
            rs = DataSet.QueryExec("select trim(name) from client where type=0 order by trim(name)", false);
            while (rs.next())
            clientCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        clientCombo.setSelectedIndex(0);
        
        valCombo.removeAllItems();
        valCombo.addItem("--Выберите валюту--");
        try{
            rs = DataSet.QueryExec("select trim(name) from val", false);
            while (rs.next())
                valCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        valCombo.setSelectedIndex(0);

        type_docCombo.removeAllItems();
        try{
            rs=DataSet.QueryExec("select trim(name) from type_doc where operacia=1 order by trim(name)", false);
            while (rs.next())
                type_docCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        type_docCombo.setSelectedItem("Приход товара");
        setRebuild(false);

    }
    private String Month(int aValue){
	switch (aValue+1){
	case 1:return "января";
	case 2:return "февраля";
	case 3:return "марта";
	case 4:return "апреля";
	case 5:return "мая";
	case 6:return "июня";
	case 7:return "июля";
	case 8:return "августа";
	case 9:return "сентября";
	case 10:return "октября";
	case 11:return "ноября";
	case 12:return "декабря";
	default: return "";
	}
    }
    private void Print_view(boolean print){
        Vector<Vector<String>> OutData = new Vector<Vector<String>>(0);
        NumberFormat formatter = new DecimalFormat ( "0.00" ) ;
        try{
            ResultSet rs=DataSet.QueryExec("select trim(tovar.name), lines.kol, cost, disc, lines.kol*cost*(1-disc/100) from lines inner join tovar on lines.id_tovar=tovar.id_tovar where id_doc="+getId_doc()+" order by tovar.name", false);
            for (int i=0; i<OutData.size();i++)
            OutData.get(i).clear();
            OutData.clear();
            int j=0;
            while (rs.next()){
                Vector<String> Row=new Vector<String>(0);
                j++;
		Row.add(j+"");
		Row.add(rs.getString(1));
		Row.add(rs.getString(2));
		Row.add(formatter.format(rs.getDouble(3)));
		Row.add(rs.getString(4));
		Row.add(formatter.format(rs.getDouble(5)));
		OutData.add(Row);
            }
            rs=DataSet.QueryExec("select sum, trim(note), disc, trim(val.name), trim(manager.name), trim(sklad.name), numb, trim(client.name) from (((document inner join val on document.id_val=val.id_val) inner join manager on document.id_manager=manager.id_manager) inner join " +
                "sklad on document.id_skl=sklad.id_skl) inner join client on document.id_client=client.id_client where id_doc="+getId_doc(), false);
            rs.next();
            String numb="";
            if (!(rs.getString(7)==null))
                numb=rs.getString(7);
            GregorianCalendar now=new GregorianCalendar();
            int size=OutData.size();
            OutputOO.OpenDoc("nakl_pr.ots",print);
            OutputOO.InsertOne("\""+now.get(Calendar.DAY_OF_MONTH)+"\" "+Month(now.get(Calendar.MONTH))+" "+now.get(Calendar.YEAR)+"г.", 10, true, 4,1);
            OutputOO.InsertOne("Накладная №"+numb, 16, true, 1, 2);
            OutputOO.InsertOne("Поставщик: "+rs.getString(8),11, true, 1,4);
            OutputOO.InsertOne(rs.getString(2),8,false,1,6);
            OutputOO.InsertOne("Склад: "+rs.getString(6),7,false,6,7);
            OutputOO.InsertOne("Валюта: "+rs.getString(4),7,false,1,7);
            OutputOO.InsertOne("ИТОГО:",10,false,4,9+size);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)/(1-rs.getDouble(3)/100)),10,false,6,9+size);
            OutputOO.InsertOne("Скидка",10,false,2,9+size+1);
            OutputOO.InsertOne(formatter.format(rs.getDouble(3))+"%",10,false,4,9+size+1);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)*(1/(1-rs.getDouble(3)/100)-1)),10,false,6,9+size+1);
            OutputOO.InsertOne("Итого со скидкой",10,false,2,9+size+2);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)),10,true,6,9+size+2);
            OutputOO.InsertOne("Документ оформил: "+rs.getString(5),8,false,2,9+size+4);
            OutputOO.Insert(1, 9, OutData);
            if (print){
                OutputOO.print(1);
                OutputOO.CloseDoc();
        }

        }catch(Exception e){
            e.printStackTrace();
        }
    }
    public void setEditable(boolean flag){
        skladCombo.setEnabled(flag);
        clientCombo.setEnabled(flag);
        valCombo.setEnabled(flag);
        type_docCombo.setEnabled(flag);
        groupTree.setEnabled(flag);
        nameList.setEnabled(flag);
        noteTextField.setEnabled(flag);
        findButton.setEnabled(flag);
        editButton.setEnabled(flag);
        NewTovarButton.setEnabled(flag);
        saveButton.setEnabled(flag);
        regButton.setEnabled(flag);
        naklTable.setEnabled(flag);
        discTextField.setEnabled(flag);
        koefTextField.setEnabled(flag);
    }
}
