
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeSelectionModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InputPanel.java
 *
 * Created on 06.07.2009, 13:06:42
 */

/**
 *
 * @author Admin
 */
public class InputPanel extends javax.swing.JPanel {

    /** Creates new form InputPanel */
    public InputPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        skladCombo = new JComboBox();
        jLabel2 = new JLabel();
        clientCombo = new JComboBox();
        jLabel3 = new JLabel();
        jFormattedTextField1 = new JFormattedTextField();
        jScrollPane1 = new JScrollPane();
        groupTree = new JTree(new GroupTreeModel());
        jScrollPane2 = new JScrollPane();
        modelList=new DefaultListModel();
        nameList = new JList(modelList);
        jScrollPane3 = new JScrollPane();
        model = new naklTableModel((String)clientCombo.getSelectedItem(), (String)skladCombo.getSelectedItem(), 0, false);
        model.setEditable(true);
        naklTable = new JTable(model);
        findButton = new JButton();
        saveButton = new JButton();
        regButton = new JButton();
        printButton = new JButton();
        viewButton = new JButton();
        priceButton = new JButton();
        NewTovarButton = new JButton();
        jLabel4 = new JLabel();
        discTextField = new JTextField();
        jLabel5 = new JLabel();
        valCombo = new JComboBox();
        jLabel6 = new JLabel();
        noteTextField = new JTextField();
        itogowo = new JLabel();
        itogo = new JLabel();
        jLabel7 = new JLabel();
        koefTextField = new JTextField();

        addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Склад");

        skladCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                skladComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Поставщик");

        jLabel3.setText("Дата");

        jFormattedTextField1.setText("jFormattedTextField1");

        groupTree.setRootVisible(false);
        groupTree.setShowsRootHandles(true);
        groupTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        groupTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                groupTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(groupTree);

        nameList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        nameList.setVisibleRowCount(22);
        nameList.setFixedCellWidth(300);
        nameList.setFixedCellHeight(16);
        nameList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                nameListMouseClicked(evt);
            }
        });
        nameList.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                nameListKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(nameList);

        naklTable.setAutoCreateColumnsFromModel(false);
        naklTable.getColumnModel().getColumn(0).setMaxWidth(30);
        naklTable.getColumnModel().getColumn(1).setMaxWidth(455);
        naklTable.getColumnModel().getColumn(2).setMaxWidth(50);
        naklTable.getColumnModel().getColumn(3).setMaxWidth(71);
        naklTable.getColumnModel().getColumn(4).setMaxWidth(96);
        naklTable.getColumnModel().getColumn(5).setMaxWidth(58);
        naklTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        naklTable.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                naklTableKeyPressed(evt);
            }
        });
        model.addTableModelListener(new TableModelListener(){
            public void tableChanged(TableModelEvent event){
                itogo.setText("Итого (учитывая скидку): "+model.summ());
                itogowo.setText("Итого (без скидку): "+model.summvo());
                setChanged(true);
                if (model.getRowCount()==0){
                    skladCombo.setEnabled(true);
                }
                else{
                    skladCombo.setEnabled(false);
                }
            }
        });
        jScrollPane3.setViewportView(naklTable);

        findButton.setText("Поиск по коду");
        findButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Сохранить");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        regButton.setText("Зарегистрировать");
        regButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                regButtonActionPerformed(evt);
            }
        });

        printButton.setText("Напечатать");
        printButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        viewButton.setText("Просмотреть");
        viewButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        priceButton.setText("Прайс-лист");
        priceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                priceButtonActionPerformed(evt);
            }
        });

        NewTovarButton.setText("Добавить новый");
        NewTovarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                NewTovarButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Скидка");

        discTextField.setText("0");
        discTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                discTextFieldActionPerformed(evt);
            }
        });
        discTextField.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                discTextFieldFocusLost(evt);
            }
        });
        discTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                discTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Валюта:");

        valCombo.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Примечание:");

        noteTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                noteTextFieldActionPerformed(evt);
            }
        });

        itogowo.setText("Сумма без скидки: 0,00");

        itogo.setText("Сумма со скидкой: 0,00");

        jLabel7.setText("Коєффициент");

        koefTextField.setText("1");
        koefTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                koefTextFieldActionPerformed(evt);
            }
        });
        koefTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                koefTextFieldKeyTyped(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 824, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(priceButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(printButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
                        .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addComponent(noteTextField))
                        .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 319, GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                        .addComponent(clientCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(skladCombo, 0, 254, Short.MAX_VALUE))))
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(77, 77, 77)
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(valCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 329, GroupLayout.PREFERRED_SIZE))))
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(findButton, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
                                .addComponent(NewTovarButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itogowo, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(itogo, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(koefTextField, GroupLayout.PREFERRED_SIZE, 92, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(skladCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clientCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(valCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(findButton)
                        .addGap(29, 29, 29)
                        .addComponent(NewTovarButton))
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 279, GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(noteTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED, 13, GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(regButton)
                        .addGap(11, 11, 11)
                        .addComponent(printButton)
                        .addGap(18, 18, 18)
                        .addComponent(viewButton)
                        .addGap(18, 18, 18)
                        .addComponent(priceButton))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(itogowo)
                    .addComponent(jLabel4)
                    .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(itogo)
                    .addComponent(jLabel7)
                    .addComponent(koefTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void groupTreeValueChanged(TreeSelectionEvent evt) {//GEN-FIRST:event_groupTreeValueChanged
  	int index;
	index=((DataNode)evt.getPath().getLastPathComponent()).getIndex();
	initList(index);
    }//GEN-LAST:event_groupTreeValueChanged

    private void skladComboActionPerformed(ActionEvent evt) {//GEN-FIRST:event_skladComboActionPerformed
        setSklad((String)skladCombo.getSelectedItem());        // TODO add your handling code here:
    }//GEN-LAST:event_skladComboActionPerformed

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initCombo();
        discTextField.setText("0");
        model.setIndDiscount(0);
        noteTextField.setText("");
        koefTextField.setText("1");
        setKoef(1.0);
        setNote("");
        setChanged(false);
        setId_doc(0);
    }//GEN-LAST:event_formComponentShown

    private void nameListMouseClicked(MouseEvent evt) {//GEN-FIRST:event_nameListMouseClicked
        if (evt.getClickCount()==2){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
//            naklTable.getColumnModel().getColumn(2).
            naklTable.editCellAt(row, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();

        }
    }//GEN-LAST:event_nameListMouseClicked

    private void findButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findButtonActionPerformed

    private void priceButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_priceButtonActionPerformed
        if (priceDialog==null)
            priceDialog=new PriceForm(null, true);
        Vector<String> nazv=new Vector<String>(0);
        Vector<Double> cost=new Vector<Double>(0);
        double curs=1.0;
        try {
            ResultSet rs = DataSet.QueryExec("select curs from curs_now where id_val=(select id_val from val where name='" + valCombo.getSelectedItem() + "')", false);
            rs.next();
            curs=rs.getDouble(1);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        for (int i=0; i<model.getRowCount();i++){
            nazv.addElement((String)model.getValueAt(i, 1));
            cost.addElement((Double)model.getValueAt(i, 3)*(1-(new Integer(model.getIndDiscount())).doubleValue()/100)*(1-((Integer)model.getValueAt(i, 5)).doubleValue()/100)*getKoef()*curs);
        }
        priceDialog.setSklad((String)skladCombo.getSelectedItem());
        priceDialog.dialogShown(nazv, cost);
    }//GEN-LAST:event_priceButtonActionPerformed

    @SuppressWarnings("static-access")
    private void naklTableKeyPressed(KeyEvent evt) {//GEN-FIRST:event_naklTableKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            if(naklTable.getEditingColumn()==2){
                naklTable.editCellAt(naklTable.getEditingRow(), 3);
//                naklTable.setEditingColumn(3);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==3){
                naklTable.editCellAt(naklTable.getEditingRow(), 5);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==5)
                evt.setKeyCode(evt.VK_UNDEFINED);
                nameList.requestFocus();
        }


    }//GEN-LAST:event_naklTableKeyPressed

    private void nameListKeyPressed(KeyEvent evt) {//GEN-FIRST:event_nameListKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }//GEN-LAST:event_nameListKeyPressed
    private int id_doc;

    public int getId_doc() {
        return id_doc;
    }

    public void setId_doc(int id_doc) {
        this.id_doc = id_doc;
    }
    private boolean changed = false;

    public boolean isChanged() {
        return changed;
    }

    public void setChanged(boolean changed) {
        this.changed = changed;
    }

    private void NewTovarButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_NewTovarButtonActionPerformed
        if (dialog==null)
            dialog = new NewTovarDialog(null,true);
        dialog.setSklad((String)skladCombo.getSelectedItem());
        dialog.setVisible(true);
        if (dialog.isOk()){
            try {
                DataSet.UpdateQuery("insert into kart (id_tovar, id_group, id_nom,id_skl) select (select id_tovar from tovar where name='" + dialog.getTovar() + "'), " + ((DataNode) groupTree.getLastSelectedPathComponent()).getIndex() + ", (select max(id_nom)+1 from kart), id_skl from sklad where name='" + skladCombo.getSelectedItem() + "'");
            } catch (SQLException ex) {
                try {
                    DataSet.UpdateQuery("rollback to point1");
                } catch (SQLException ex1) {
                    ex.printStackTrace();
                }
                ex.printStackTrace();
            }
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            nameList.setSelectedValue(dialog.getTovar(), true);
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row-1, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }//GEN-LAST:event_NewTovarButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        for (int i=0; i<model.getRowCount(); i++){
	if(((Integer)model.getValueAt(i, 2)).intValue()==0){
		model.removeRow(i);
		i--;
		}
	}
        if (model.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Пустую накладную сохранить нельзя","Пустая накладная",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try{
            DataSet.UpdateQuery("savepoint point2");
            String SQL;
            ResultSet rs1;
            SQL="lock table document in exclusive mode";
            setId_doc(1);
            DataSet.UpdateQuery(SQL);
            rs1=DataSet.QueryExec("select id_doc from document where id_doc=(select max(id_doc) from document)", false);
            if (rs1.next())
                setId_doc(rs1.getInt(1)+1);
            SQL="insert into document (id_type_doc, id_doc, id_client, id_skl, id_val, sum, note, disc, id_manager) select 1 as id_type_doc,"+getId_doc()+" as id_doc"+
		", (select id_client from client where name='"+(String)clientCombo.getSelectedItem()+"') as id_client" +
		", (select id_skl from SKLAD where name='"+(String)skladCombo.getSelectedItem()+"') as id_skl"+
		", (select id_val from val where name='"+(String)valCombo.getSelectedItem()+"') as id_val" +
		", "+model.summ()+" as sum ,'"+getNote()+"' as note, "+model.getIndDiscount()+" as disc, " +
		" id_manager from manager where name='"+getManager()+"'";
            DataSet.UpdateQuery(SQL);
            for (int i=0;i<model.getRowCount();i++){
                SQL="insert into lines (id_doc,kol,cost,disc,id_tovar) select "+getId_doc()+" as id_doc, "+model.getValueAt(i,2)+" as kol, "+model.getValueAt(i,3)+"*"+getKoef()+" as cost, "+model.getValueAt(i, 5)+" as disc, id_tovar from tovar where name='"+
                model.getValueAt(i, 1)+"'";
                DataSet.UpdateQuery(SQL);
            }
            setChanged(false);
            DataSet.commit();
            JOptionPane.showMessageDialog(this, "Документ записан", "Запись", JOptionPane.PLAIN_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Запись не удалась. Повторите попытку.", "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            try{
                DataSet.UpdateQuery("rollback to point2");
            }catch(Exception ex){
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    private String Note;

    public String getNote() {
        return Note;
    }

    public void setNote(String Note) {
        this.Note = Note;
    }

    private void discTextFieldKeyTyped(KeyEvent evt) {//GEN-FIRST:event_discTextFieldKeyTyped
        if (evt.getKeyChar()=='-')
            if (discTextField.getText().length()==0)
                return;
            else
                evt.setKeyChar(evt.CHAR_UNDEFINED);
        char[] symb = new char[1];
        symb[0]=evt.getKeyChar();
        if (!(new String(symb)).matches("[0-9]"))
            evt.setKeyChar(evt.CHAR_UNDEFINED);
    }//GEN-LAST:event_discTextFieldKeyTyped

    private void discTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_discTextFieldActionPerformed
        model.setIndDiscount(new Integer(discTextField.getText()));
        koefTextField.requestFocus();
    }//GEN-LAST:event_discTextFieldActionPerformed

    private void noteTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_noteTextFieldActionPerformed
        setNote(noteTextField.getText());
        discTextField.requestFocus();
    }//GEN-LAST:event_noteTextFieldActionPerformed

    private void regButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_regButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ зарегистрировать нельзя! \n Сохраните документ и повторите операцию", "Ошибка проведения", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try{
            ResultSet rs=DataSet.QueryExec("select max(numb) from document where (to_number(to_char(day, 'YYYY'))=to_number(to_char(sysdate, 'YYYY'))) and (id_type_doc=0) ", false);
            rs.next();
            int numb=rs.getInt(1)+1;
            DataSet.QueryExec("select for update * from document where id_doc="+getId_doc(), false);
            DataSet.QueryExec("select for update * from kart where cost is NULL", false);
//            double k=1.0;
            for (int i=0; i<model.getRowCount();i++){
                rs=DataSet.QueryExec("Select id_nom from kart where (id_tovar=(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"')) and (id_skl = (select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"')) and (cost is NULL)", false);
                if (rs.next()){
                    int id_nom=rs.getInt(1);
                    DataSet.UpdateQuery("update kart set cost="+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+", day=sysdata, val=(select id_val from val where name='"+valCombo.getSelectedItem()+"') where id_nom="+id_nom );
                }else{
                    rs=DataSet.QueryExec("select count(*) from kart where (cost="+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+") and (val=(select id_val from val where name='"+valCombo.getSelectedItem()+"')) and (id_tovar=(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"')) and (id_skl = (select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"'))",false);
                    rs.next();
                    if (rs.getInt(1)==0){
                        DataSet.UpdateQuery("insert into kart (id_tovar, id_skl, id_group, id_nom, cost, day, val) select " +
                                "(select id_tovar from tovar where name='"+model.getValueAt(i, 1)+"') as id_tovar," +
                                "(select id_skl from sklad where name='"+skladCombo.getSelectedItem()+"') as id_skl," +
                                + ((DataNode) groupTree.getLastSelectedPathComponent()).getIndex() + " as id_group," +
                                "(select max(id_nom)+1 from kart) as id_nom," +
                                ""+model.getValueAt(i, 3)+"*(1-"+model.getValueAt(i, 5)+"/100)*"+getKoef()+" as cost," +
                                "sysdata as day," +
                                "id_val from val where name='"+valCombo.getSelectedItem()+"'");
                    }
                }
            }
            DataSet.UpdateQuery("update document set numb="+numb+", day=sysdate where id_doc="+getId_doc());
            DataSet.commit();
            model.removeAll();
            setVisible(false);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Зарегистрировать не удалась. Повторите попытку.", "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            try {
                DataSet.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            e.printStackTrace();
        }
    }//GEN-LAST:event_regButtonActionPerformed

    private void printButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ напечатать нельзя! \n Сохраните документ и повторите операцию", "Ошибка печати", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Print_view(true);
    }//GEN-LAST:event_printButtonActionPerformed

    private void viewButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ просмотреть нельзя! \n Сохраните документ и повторите операцию", "Ошибка просмотра", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Print_view(false);
    }//GEN-LAST:event_viewButtonActionPerformed

    private void koefTextFieldKeyTyped(KeyEvent evt) {//GEN-FIRST:event_koefTextFieldKeyTyped
        char[] symb = new char[1];
        symb[0]=evt.getKeyChar();
        if (!(new String(symb)).matches("[0-9.]"))
            evt.setKeyChar(evt.CHAR_UNDEFINED);
    }//GEN-LAST:event_koefTextFieldKeyTyped

    private void discTextFieldFocusLost(FocusEvent evt) {//GEN-FIRST:event_discTextFieldFocusLost
        model.setIndDiscount(new Integer(discTextField.getText()));
    }//GEN-LAST:event_discTextFieldFocusLost

    private void koefTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_koefTextFieldActionPerformed
        setKoef(new Double(koefTextField.getText()));
        nameList.requestFocus();
    }//GEN-LAST:event_koefTextFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton NewTovarButton;
    private JComboBox clientCombo;
    private JTextField discTextField;
    private JButton findButton;
    private JTree groupTree;
    private JLabel itogo;
    private JLabel itogowo;
    private JFormattedTextField jFormattedTextField1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTextField koefTextField;
    private JTable naklTable;
    private JList nameList;
    private JTextField noteTextField;
    private JButton priceButton;
    private JButton printButton;
    private JButton regButton;
    private JButton saveButton;
    private JComboBox skladCombo;
    private JComboBox valCombo;
    private JButton viewButton;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel modelList;
    private String Sklad;
    private naklTableModel model;
    private NewTovarDialog dialog;
    private String Manager;
    private double koef = 1.0;
    private PriceForm priceDialog=null;
    public double getKoef() {
        return koef;
    }

    public void setKoef(double koef) {
        this.koef = koef;
    }

    /**
     * Get the value of Manager
     *
     * @return the value of Manager
     */
    public String getManager() {
        return Manager;
    }

    /**
     * Set the value of Manager
     *
     * @param Manager new value of Manager
     */
    public void setManager(String Manager) {
        this.Manager = Manager;
    }

    public void setSklad(String Sklad) {
        this.Sklad = Sklad;
    }

    private void initList(int aIndex){
	modelList.clear();
	String Query="select trim(name) from (Select distinct tovar.name from kart inner join tovar on kart.id_tovar=tovar.id_tovar where (kart.id_group="+aIndex+") and (kart.id_skl=(Select id_skl from sklad where name='"+Sklad+"')) order by tovar.name)";
	
	try {
                ResultSet rs=DataSet.QueryExec(Query,false);
        	while (rs.next())
		modelList.addElement(rs.getString(1));
		rs.close();
	} catch (Exception e) {
		e.printStackTrace();
	}
    }
    private void initCombo(){
        skladCombo.removeAllItems();
        ResultSet rs;
        try{
            rs = DataSet.QueryExec("select trim(name) from sklad order by trim(name)", false);
            while (rs.next())
                skladCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        skladCombo.setSelectedIndex(0);
        setSklad((String)skladCombo.getSelectedItem());
        
        clientCombo.removeAllItems();
        try{
            rs = DataSet.QueryExec("select trim(name) from client where type=0 order by trim(name)", false);
            while (rs.next())
            clientCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        clientCombo.setSelectedIndex(0);
        
        valCombo.removeAllItems();
        try{
            rs = DataSet.QueryExec("select trim(name) from val", false);
            while (rs.next())
                valCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        valCombo.setSelectedIndex(0);


    }
    private String Month(int aValue){
	switch (aValue+1){
	case 1:return "января";
	case 2:return "февраля";
	case 3:return "марта";
	case 4:return "апреля";
	case 5:return "мая";
	case 6:return "июня";
	case 7:return "июля";
	case 8:return "августа";
	case 9:return "сентября";
	case 10:return "октября";
	case 11:return "ноября";
	case 12:return "декабря";
	default: return "";
	}
    }
    private void Print_view(boolean print){
        Vector<Vector<String>> OutData = new Vector<Vector<String>>(0);
        NumberFormat formatter = new DecimalFormat ( "0.00" ) ;
        try{
            ResultSet rs=DataSet.QueryExec("select trim(tovar.name), lines.kol, cost, disc, sum(lines.kol*cost*(1-disc/100)) from lines inner join tovar on lines.id_tovar=tovar.id_tovar where id_doc="+getId_doc()+" group by tovar.name, cost, lines.kol, disc order by tovar.name", false);
            for (int i=0; i<OutData.size();i++)
            OutData.get(i).clear();
            OutData.clear();
            int j=0;
            while (rs.next()){
                Vector<String> Row=new Vector<String>(0);
                j++;
		Row.add(j+"");
		Row.add(rs.getString(1));
		Row.add(rs.getString(2));
		Row.add(formatter.format(rs.getDouble(3)));
		Row.add(rs.getString(4));
		Row.add(formatter.format(rs.getDouble(5)));
		OutData.add(Row);
            }
            rs=DataSet.QueryExec("select sum, trim(note), disc, trim(val.name), trim(manager.name), trim(sklad.name), numb, trim(client.name) from (((document inner join val on document.id_val=val.id_val) inner join manager on document.id_manager=manager.id_manager) inner join " +
                "sklad on document.id_skl=sklad.id_skl) inner join client on document.id_client=client.id_client where id_doc="+getId_doc(), false);
            rs.next();
            String numb="";
            if (!(rs.getString(7)==null))
                numb=rs.getString(7);
            GregorianCalendar now=new GregorianCalendar();
            int size=OutData.size();
            OutputOO.OpenDoc("nakl_pr.ots",print);
            OutputOO.InsertOne("\""+now.get(Calendar.DAY_OF_MONTH)+"\" "+Month(now.get(Calendar.MONTH))+" "+now.get(Calendar.YEAR)+"г.", 10, true, 4,1);
            OutputOO.InsertOne("Накладная №"+numb, 16, true, 1, 2);
            OutputOO.InsertOne("Поставщик: "+rs.getString(8),11, true, 1,4);
            OutputOO.InsertOne(rs.getString(2),8,false,1,6);
            OutputOO.InsertOne("Склад: "+rs.getString(6),7,false,6,7);
            OutputOO.InsertOne("Валюта: "+rs.getString(4),7,false,1,7);
            OutputOO.InsertOne("ИТОГО:",10,false,4,9+size);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)/(1-rs.getDouble(3)/100)),10,false,6,9+size);
            OutputOO.InsertOne("Скидка",10,false,2,9+size+1);
            OutputOO.InsertOne(formatter.format(rs.getDouble(3))+"%",10,false,4,9+size+1);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)*(1/(1-rs.getDouble(3)/100)-1)),10,false,6,9+size+1);
            OutputOO.InsertOne("Итого со скидкой",10,false,2,9+size+2);
            OutputOO.InsertOne(formatter.format(rs.getDouble(1)),10,true,6,9+size+2);
            OutputOO.InsertOne("Документ оформил: "+rs.getString(5),8,false,2,9+size+4);
            OutputOO.Insert(1, 9, OutData);
            if (print){
                OutputOO.print(1);
                OutputOO.CloseDoc();
        }

        }catch(Exception e){
            e.printStackTrace();
        }
    }
}
