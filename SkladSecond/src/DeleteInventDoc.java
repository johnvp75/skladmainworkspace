
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.AbstractListModel;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeleteInventDoc.java
 *
 * Created on Feb 9, 2011, 11:05:29 AM
 */

/**
 *
 * @author Admin
 */
public class DeleteInventDoc extends javax.swing.JDialog {

    /** Creates new form DeleteInventDoc */
     public DeleteInventDoc(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        docList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Выберите документ для отмены");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Критерий отбора");

        jScrollPane1.setViewportView(docList);

        jButton1.setText("Удалить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(212, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(372, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try{
            ResultSet rs=DataSet.QueryExec("select day, trim(note), id_doc from document where id_type_doc=5 and instr(note,'id_group')>0 order by day", false);
            AbstractListModel model;
            final Vector<String> strings=new Vector<String>();
            int i=0;
            while (rs.next()){
                strings.add(rs.getString(2).substring(1).replace(';', ',') +"; "+rs.getString(3)+"; "+rs.getString(1));
            }
            model=new AbstractListModel() {
            public int getSize() { return strings.size(); }
            public Object getElementAt(int i) { return strings.elementAt(i); }
            };
            docList.setModel(model);
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_formComponentShown
    protected String manager;

    public String getManager() {
        return manager;
    }

    public void setManager(String manager) {
        this.manager = manager;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Object[] chooseO=docList.getSelectedValues();
        String[] choose=new String[chooseO.length];
        for (int i=0; i<chooseO.length;i++){
            choose[i]=(String)chooseO[i];
        }
        try{
            ResultSet rs;
            String SQL;
            for (int i=0; i<choose.length; i++){
                int start=choose[i].indexOf(";")+1;
                int finish=choose[i].indexOf(";", start);
                String id_doc_del=choose[i].substring(start,finish);
                int id_doc_ins=1;
                SQL="Select max(id_doc)+1 from document";
                rs=DataSet.QueryExec(SQL, false);
                if (rs.next())
                    id_doc_ins=rs.getInt(1);
                rs=DataSet.QueryExec("select id_client from client where name='Инвентаризация' and type=1", false);
                int id_client=0;
                if (rs.next())
                    id_client = rs.getInt(1);
                else{
                    DataSet.UpdateQuery1("insert into client (name, type) values ('Инвентаризация', 1)");
                    rs=DataSet.QueryExec("select id_client from client where name='Инвентаризация' and type=1", false);
                    rs.next();
                    id_client = rs.getInt(1);
                }
                SQL=String.format("Insert into document (id_doc, id_type_doc, id_client, id_skl, id_manager, id_val, sum, disc) select " +
                        "%1$s, 2, %2$s, id_skl, id_manager, id_val, 0.00, " +
                        "0 as disc from document where id_doc='%3$s'", id_doc_ins, id_client, id_doc_del);
                DataSet.UpdateQuery(SQL);
                SQL=String.format("insert into lines (id_tovar, id_doc, kol, cost, disc) select intable.id_tovar as id_tovar, %1$s as id_doc, " +
                        "intable.kol_ost as kol, 0 as cost, 0 as disc from (select id_tovar, kol_ost from (select l.id_tovar, sum(l.kol*nvl2(nullif(2,t.operacia), " +
                        "1,(-1)) ) as kol_ost from kart k, lines l, document d, type_doc t, (select id_skl, day from document where id_doc=%2$s) dd  where d.numb " +
                        "is not null and l.id_doc = d.id_doc and d.id_type_doc=t.id_type_doc and t.operacia in (1,2) and d.id_skl=dd.id_skl and d.day<=dd.day and " +
                        "l.id_tovar = k.id_tovar and k.id_group in (select id_group from groupid start with id_group=(select substr(note,instr(note,'id_group: ')+10, " +
                        "instr(note,' sklad:')-instr(note,'id_group: ')-10) from document where id_doc=%2$s) connect by prior id_group=parent_group) group by k.id_group, " +
                        "l.id_tovar) where kol_ost<>0) intable", id_doc_ins,id_doc_del);
                DataSet.UpdateQuery(SQL);
                SQL=String.format("delete from lines where id_doc=%s", id_doc_del);
                DataSet.UpdateQuery(SQL);
                SQL=String.format("delete from document where id_doc=%s", id_doc_del);
                DataSet.UpdateQuery(SQL);
            }
            DataSet.commit();
            JOptionPane.showMessageDialog(null,"Удалено!");
            rs=DataSet.QueryExec("select day, trim(note), id_doc from document where id_type_doc=5 and instr(note,'id_group')>0 order by day", false);
            AbstractListModel model;
            final Vector<String> strings=new Vector<String>();
            while (rs.next()){
                strings.add(rs.getString(2).substring(1).replace(';', ',') +"; "+rs.getString(3)+"; "+rs.getString(1));
            }
            model=new AbstractListModel() {
            public int getSize() { return strings.size(); }
            public Object getElementAt(int i) { return strings.elementAt(i); }
            };
            docList.setModel(model);
        }catch(Exception e){
           try{
                JOptionPane.showMessageDialog(null, "Ошибка работы с базой данных.\n Данные в таблице не действительны!!!", "Ошибка", JOptionPane.ERROR_MESSAGE);
                DataSet.rollback();
            }catch(Exception e1){
                e1.printStackTrace();
            }
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList docList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
