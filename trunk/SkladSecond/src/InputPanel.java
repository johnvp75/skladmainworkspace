
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeSelectionModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InputPanel.java
 *
 * Created on 06.07.2009, 13:06:42
 */

/**
 *
 * @author Admin
 */
public class InputPanel extends javax.swing.JPanel {

    /** Creates new form InputPanel */
    public InputPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        skladCombo = new JComboBox();
        jLabel2 = new JLabel();
        clientCombo = new JComboBox();
        jLabel3 = new JLabel();
        jFormattedTextField1 = new JFormattedTextField();
        jScrollPane1 = new JScrollPane();
        groupTree = new JTree(new GroupTreeModel());
        jScrollPane2 = new JScrollPane();
        modelList=new DefaultListModel();
        nameList = new JList(modelList);
        jScrollPane3 = new JScrollPane();
        model = new naklTableModel((String)clientCombo.getSelectedItem(), (String)skladCombo.getSelectedItem(), 0, false);
        model.setEditable(true);
        naklTable = new JTable(model);
        findButton = new JButton();
        saveButton = new JButton();
        regButton = new JButton();
        printButton = new JButton();
        viewButton = new JButton();
        jButton1 = new JButton();
        NewTovarButton = new JButton();
        jLabel4 = new JLabel();
        discTextField = new JTextField();
        jLabel5 = new JLabel();
        valCombo = new JComboBox();
        jLabel6 = new JLabel();
        noteTextField = new JTextField();
        itogowo = new JLabel();
        itogo = new JLabel();

        addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Склад");

        skladCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                skladComboActionPerformed(evt);
            }
        });

        jLabel2.setText("Поставщик");

        jLabel3.setText("Дата");

        jFormattedTextField1.setText("jFormattedTextField1");

        groupTree.setRootVisible(false);
        groupTree.setShowsRootHandles(true);
        groupTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        groupTree.addTreeSelectionListener(new TreeSelectionListener() {
            public void valueChanged(TreeSelectionEvent evt) {
                groupTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(groupTree);

        nameList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        nameList.setVisibleRowCount(22);
        nameList.setFixedCellWidth(300);
        nameList.setFixedCellHeight(16);
        nameList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                nameListMouseClicked(evt);
            }
        });
        nameList.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                nameListKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(nameList);

        naklTable.setAutoCreateColumnsFromModel(false);
        naklTable.getColumnModel().getColumn(0).setMaxWidth(30);
        naklTable.getColumnModel().getColumn(1).setMaxWidth(455);
        naklTable.getColumnModel().getColumn(2).setMaxWidth(50);
        naklTable.getColumnModel().getColumn(3).setMaxWidth(71);
        naklTable.getColumnModel().getColumn(4).setMaxWidth(96);
        naklTable.getColumnModel().getColumn(5).setMaxWidth(58);
        naklTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        naklTable.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                naklTableKeyPressed(evt);
            }
        });
        model.addTableModelListener(new TableModelListener(){
            public void tableChanged(TableModelEvent event){
                itogo.setText("Итого (учитывая скидку): "+model.summ());
                itogowo.setText("Итого (без скидку): "+model.summvo());
                setChanged(true);
                if (model.getRowCount()==0){
                    skladCombo.setEnabled(true);
                }
                else{
                    skladCombo.setEnabled(false);
                }
            }
        });
        jScrollPane3.setViewportView(naklTable);

        findButton.setText("Поиск по коду");
        findButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Сохранить");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        regButton.setText("Зарегистрировать");
        regButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                regButtonActionPerformed(evt);
            }
        });

        printButton.setText("Напечатать");

        viewButton.setText("Просмотреть");

        jButton1.setText("Прайс-лист");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        NewTovarButton.setText("Добавить новый");
        NewTovarButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                NewTovarButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Скидка");

        discTextField.setText("0");
        discTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                discTextFieldActionPerformed(evt);
            }
        });
        discTextField.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                discTextFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Валюта:");

        valCombo.setModel(new DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Примечание:");

        noteTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                noteTextFieldActionPerformed(evt);
            }
        });

        itogowo.setText("Сумма без скидки: 0,00");

        itogo.setText("Сумма со скидкой: 0,00");

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 824, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addComponent(jButton1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(viewButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(printButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
                        .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(ComponentPlacement.RELATED)
                            .addComponent(noteTextField))
                        .addGroup(Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 319, GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                    .addPreferredGap(ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                        .addComponent(clientCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(skladCombo, 0, 254, Short.MAX_VALUE))))
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(77, 77, 77)
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(ComponentPlacement.RELATED)
                                            .addComponent(valCombo, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 329, GroupLayout.PREFERRED_SIZE))))
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                .addComponent(findButton, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)
                                .addComponent(NewTovarButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itogowo, GroupLayout.PREFERRED_SIZE, 203, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(itogo, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(skladCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jFormattedTextField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(clientCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(valCombo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(findButton)
                        .addGap(29, 29, 29)
                        .addComponent(NewTovarButton))
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 279, GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(noteTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(ComponentPlacement.RELATED, 13, GroupLayout.PREFERRED_SIZE)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(regButton)
                        .addGap(11, 11, 11)
                        .addComponent(printButton)
                        .addGap(18, 18, 18)
                        .addComponent(viewButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(itogowo)
                    .addComponent(jLabel4)
                    .addComponent(discTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(itogo)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void groupTreeValueChanged(TreeSelectionEvent evt) {//GEN-FIRST:event_groupTreeValueChanged
  	int index;
	index=((DataNode)evt.getPath().getLastPathComponent()).getIndex();
	initList(index);
    }//GEN-LAST:event_groupTreeValueChanged

    private void skladComboActionPerformed(ActionEvent evt) {//GEN-FIRST:event_skladComboActionPerformed
        setSklad((String)skladCombo.getSelectedItem());        // TODO add your handling code here:
    }//GEN-LAST:event_skladComboActionPerformed

    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initCombo();
        discTextField.setText("0");
        model.setIndDiscount(0);
        noteTextField.setText("");
        setNote("");
        setChanged(false);
        setId_doc(0);
    }//GEN-LAST:event_formComponentShown

    private void nameListMouseClicked(MouseEvent evt) {//GEN-FIRST:event_nameListMouseClicked
        if (evt.getClickCount()==2){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
//            naklTable.getColumnModel().getColumn(2).
            naklTable.editCellAt(row-1, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();

        }
    }//GEN-LAST:event_nameListMouseClicked

    private void findButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_findButtonActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    @SuppressWarnings("static-access")
    private void naklTableKeyPressed(KeyEvent evt) {//GEN-FIRST:event_naklTableKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            if(naklTable.getEditingColumn()==2){
                naklTable.editCellAt(naklTable.getEditingRow(), 3);
//                naklTable.setEditingColumn(3);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==3){
                naklTable.editCellAt(naklTable.getEditingRow(), 5);
                evt.setKeyCode(evt.VK_UNDEFINED);
                ((JTextField)naklTable.getEditorComponent()).selectAll();

                return;
            }
            if(naklTable.getEditingColumn()==5)
                evt.setKeyCode(evt.VK_UNDEFINED);
                nameList.requestFocus();
        }


    }//GEN-LAST:event_naklTableKeyPressed

    private void nameListKeyPressed(KeyEvent evt) {//GEN-FIRST:event_nameListKeyPressed
        if(evt.getKeyCode()==evt.VK_ENTER){
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row-1, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }//GEN-LAST:event_nameListKeyPressed
    private int id_doc;

    public int getId_doc() {
        return id_doc;
    }

    public void setId_doc(int id_doc) {
        this.id_doc = id_doc;
    }
    private boolean changed = false;

    public boolean isChanged() {
        return changed;
    }

    public void setChanged(boolean changed) {
        this.changed = changed;
    }

    private void NewTovarButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_NewTovarButtonActionPerformed
        if (dialog==null)
            dialog = new NewTovarDialog(null,true);
        dialog.setSklad((String)skladCombo.getSelectedItem());
        dialog.setVisible(true);
        if (dialog.isOk()){
            DataSet.UpdateQuery("insert into kart (id_tovar, id_group, id_skl) select (select id_tovar from tovar where name='"+dialog.getTovar()+"'), "+((DataNode)groupTree.getLastSelectedPathComponent()).getIndex()+", id_skl from sklad where name='"+skladCombo.getSelectedItem()+"'");
            initList(((DataNode)groupTree.getLastSelectedPathComponent()).getIndex());
            nameList.setSelectedValue(dialog.getTovar(), true);
            int row=model.add((String)nameList.getSelectedValue(), 1, 0.00, 0, 0);
            naklTable.requestFocus();
            naklTable.editCellAt(row-1, 2);
            ((JTextField)naklTable.getEditorComponent()).selectAll();
        }
    }//GEN-LAST:event_NewTovarButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        for (int i=0; i<model.getRowCount(); i++){
	if(((Integer)model.getValueAt(i, 2)).intValue()==0){
		model.removeRow(i);
		i--;
		}
	}
        if (model.getRowCount()==0){
            JOptionPane.showMessageDialog(this, "Пустую накладную сохранить нельзя","Пустая накладная",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try{
            //точка отката
            String SQL;
            ResultSet rs1;
            SQL="lock table document in exclusive mode";
            setId_doc(1);
            DataSet.UpdateQuery(SQL);
            rs1=DataSet.QueryExec("select id_doc from document where id_doc=(select max(id_doc) from document)", false);
            if (rs1.next())
                setId_doc(rs1.getInt(1)+1);
            SQL="insert into document (id_type_doc, id_doc, id_client, id_skl, id_val, sum, note, disc, id_manager) select 0 as id_type_doc,"+getId_doc()+" as id_doc"+
		", (select id_client from client where name='"+(String)clientCombo.getSelectedItem()+"') as id_client" +
		", (select id_skl from SKLAD where name='"+(String)skladCombo.getSelectedItem()+"') as id_skl"+
		", (select id_val from val where name='"+(String)valCombo.getSelectedItem()+"') as id_val" +
		", "+model.summ()+" as sum ,'"+getNote()+"' as note, "+model.getIndDiscount()+" as disc, " +
		" id_manager from manager where name='"+getManager()+"'";
            DataSet.UpdateQuery(SQL);
            for (int i=0;i<model.getRowCount();i++){
                SQL="insert into lines (id_doc,kol,cost,disc,id_tovar) select "+getId_doc()+" as id_doc, (select "+model.getValueAt(i,2)+") from tovar where name='"+model.getValueAt(i, 1)+"')"+
                    " as kol, (select "+model.getValueAt(i,3)+") from tovar where name='"+model.getValueAt(i, 1)+"')"+" as cost, "+model.getValueAt(i, 5)+" as disc, id_tovar from tovar where name='"+
                model.getValueAt(i, 1)+"'";
                DataSet.UpdateQuery(SQL);
            }
            setChanged(false);
            DataSet.commit();
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Запись не удалась. Повторите попытку.", "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            //Откат к точке
            e.printStackTrace();
        }
    }//GEN-LAST:event_saveButtonActionPerformed
    private String Note;

    public String getNote() {
        return Note;
    }

    public void setNote(String Note) {
        this.Note = Note;
    }

    private void discTextFieldKeyTyped(KeyEvent evt) {//GEN-FIRST:event_discTextFieldKeyTyped
        char[] symb = null;
        symb[0]=evt.getKeyChar();
        String str=new String(symb);
        if (evt.getKeyCode()==evt.VK_ENTER)
            return;
        if (!(new String(symb)).contains("0..9"))
            evt.setKeyCode(evt.VK_UNDEFINED);
    }//GEN-LAST:event_discTextFieldKeyTyped

    private void discTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_discTextFieldActionPerformed
        model.setIndDiscount(new Integer(discTextField.getText()));
    }//GEN-LAST:event_discTextFieldActionPerformed

    private void noteTextFieldActionPerformed(ActionEvent evt) {//GEN-FIRST:event_noteTextFieldActionPerformed
        setNote(noteTextField.getText());
    }//GEN-LAST:event_noteTextFieldActionPerformed

    private void regButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_regButtonActionPerformed
        if (getId_doc()==0 || isChanged()){
            JOptionPane.showMessageDialog(this, "Несохраненный документ зарегистрировать нельзя! \n Сохраните документ и повторите операцию", "Ошибка проведения", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try{
            ResultSet rs=DataSet.QueryExec("select max(numb) from document where (to_number(to_char(day, 'YYYY'))=to_number(to_char(sysdate, 'YYYY'))) and (id_type_doc=0) ", false);
            rs.next();
            int numb=rs.getInt(1)+1;
            DataSet.UpdateQuery("update document set numb="+numb+", day=sysdate where id_doc="+getId_doc());
            DataSet.commit();
            model.removeAll();
            setVisible(false);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Зарегистрировать не удалась. Повторите попытку.", "Ошибка записи", JOptionPane.ERROR_MESSAGE);
            DataSet.rollback();
            e.printStackTrace();
        }
    }//GEN-LAST:event_regButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton NewTovarButton;
    private JComboBox clientCombo;
    private JTextField discTextField;
    private JButton findButton;
    private JTree groupTree;
    private JLabel itogo;
    private JLabel itogowo;
    private JButton jButton1;
    private JFormattedTextField jFormattedTextField1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTable naklTable;
    private JList nameList;
    private JTextField noteTextField;
    private JButton printButton;
    private JButton regButton;
    private JButton saveButton;
    private JComboBox skladCombo;
    private JComboBox valCombo;
    private JButton viewButton;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel modelList;
    private String Sklad;
    private naklTableModel model;
    private NewTovarDialog dialog;
    private String Manager;

    /**
     * Get the value of Manager
     *
     * @return the value of Manager
     */
    public String getManager() {
        return Manager;
    }

    /**
     * Set the value of Manager
     *
     * @param Manager new value of Manager
     */
    public void setManager(String Manager) {
        this.Manager = Manager;
    }

    public void setSklad(String Sklad) {
        this.Sklad = Sklad;
    }

    private void initList(int aIndex){
	modelList.clear();
	String Query="select trim(name) from (Select distinct tovar.name from kart inner join tovar on kart.id_tovar=tovar.id_tovar where (kart.id_group="+aIndex+") and (kart.id_skl=(Select id_skl from sklad where name='"+Sklad+"')) order by tovar.name)";
	ResultSet rs=DataSet.QueryExec(Query,true);
	try {
        	while (rs.next())
		modelList.addElement(rs.getString(1));
		rs.close();
	} catch (SQLException e) {
		e.printStackTrace();
	}
    }
    private void initCombo(){
        skladCombo.removeAllItems();
        ResultSet rs = DataSet.QueryExec("select trim(name) from sklad order by trim(name)", false);
        try{
            while (rs.next())
        skladCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        skladCombo.setSelectedIndex(0);
        setSklad((String)skladCombo.getSelectedItem());
        rs = DataSet.QueryExec("select trim(name) from client where type=0 order by trim(name)", false);
        clientCombo.removeAllItems();
        try{
            while (rs.next())
            clientCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        clientCombo.setSelectedIndex(0);
        rs = DataSet.QueryExec("select trim(name) from val", false);
        valCombo.removeAllItems();
        try{
            while (rs.next())
            valCombo.addItem(rs.getString(1));
        }catch(Exception e){
            e.printStackTrace();
        }
        valCombo.setSelectedIndex(0);


    }

}
